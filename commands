#!/usr/bin/env ruby
require 'pathname'
require 'fileutils'

cmd, app = ARGV
root = ENV['DOKKU_ROOT']

def fail(message)
  puts message
  exit 1
end

def notice(message)
  puts "-----> #{message}"
end

if cmd && cmd.start_with?("domains")
  fail "You must specify an app name" if app.nil? || app.strip.empty?
  
  approot = File.join(root, app)
  domainfile = File.join(approot, 'DOMAINS')
  forcesslfile = File.join(approot, 'FORCE_SSL')

  fail "App #{app} does not exist" if !Dir.exist?(approot)

  if !File.exist?(domainfile)
    notice "Creating #{domainfile}"
    FileUtils.touch(domainfile)
  end
end

case cmd
when 'domains'
  notice "Domains for #{app}"
  puts File.read(domainfile)
when 'domains:set'
  newdomains = ARGV[2..-1]
  fail "Usage: dokku domains:set APP DOMAIN1 [DOMAIN2 ...]\nMust specify a DOMAIN." if newdomains.empty?

  File.open(domainfile, 'w') { |file| file.write(newdomains.join(" ")) }
  notice "Setting #{app} domains to: #{newdomains.join(" ")}"
  system "#{File.join(Pathname.new(__FILE__).dirname, 'nginx-pre-reload')} #{app}"
  system "sudo /etc/init.d/nginx reload"
when 'domains:force_ssl'
  should_force_ssl = ["yes", "on", "1", "true"].include?(ARGV[2].downcase)
  notice "Redirect all http traffic to https #{app}: #{should_force_ssl}"
  
  if should_force_ssl
    File.open(forcesslfile, "w") {}
  else
    File.delete(forcesslfile)
  end

  system "#{File.join(Pathname.new(__FILE__).dirname, 'nginx-pre-reload')} #{app}"
  system "sudo /etc/init.d/nginx reload"
when 'help'
  puts STDIN.read unless STDIN.tty?
  puts <<-EOF
    domains <app>                                   display the domains for an app
    domains:set <app> DOMAIN1 [DOMAIN2 ...]         set one or more domains
    domains:force_ssl <app> [yes|no]                force redirect from http to https on and off
  EOF
end
